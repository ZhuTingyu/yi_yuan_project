apply plugin: 'com.android.application'
apply plugin: 'android-apt'

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName 'com.yuan.house'
    }
}

configurations {
    apt
}

//应用插件
apply plugin: 'com.bugtags.library.plugin'

//自动上传插件
bugtags {
    appKey "8b503a091aab6e57b03e1df7d01c1b85"  //这里是你的 appKey
    appSecret "19b3fe544aa03626d9831c03659ed7a3"    //这里是你的 appSecret，管理员在设置页可以查看
    mappingUploadEnabled true

    //网络跟踪功能配置(企业版)
    trackingNetworkEnabled true
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    useLibrary 'org.apache.http.legacy'

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.yuan.house"

            versionCode code
            versionName "0.1." + code

            minSdkVersion Integer.parseInt(project.ANDROID_MIN_SDK)
            targetSdkVersion Integer.parseInt(project.ANDROID_TARGET_SDK_VERSION)
            multiDexEnabled true
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        debug {
            storeFile file("../house.jks")
            storePassword "house888"
            keyAlias "house"
            keyPassword "house888"
        }

        release {
            storeFile file("../house.jks")
            storePassword "house888"
            keyAlias "house"
            keyPassword "house888"
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"

            signingConfig signingConfigs.debug
        }

        release {
            versionNameSuffix "-RELEASE"
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'

            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        pickFirst 'META-INF/MANIFEST.MF'

        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
//        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'AndroidManifest.xml'
    }
    productFlavors {

    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }
    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g" //specify the heap size for the dex process
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile project(':libraries:ShareCode')
    compile project(':libraries:chatexamplegenerator')
    compile project(':libraries:Loading')
    compile project(':libraries:MultiImageSelector')
    compile project(':libraries:clippicture')
    compile project(':libraries:pinchimageview')
    compile project(':libraries:clippicture')

    /** Android .           */
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.android.support:appcompat-v7:23.4.0'
    //app:transformClassesWithDexForDebug error
    compile 'com.android.support:multidex:1.0.1'

    /** Annotations .        */
    apt "org.androidannotations:androidannotations:3.3.2"
    compile 'org.androidannotations:androidannotations-api:3.3.2'

    /** Core .        */
    compile 'org.apache.commons:commons-lang3:3.3.1'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.orhanobut:hawk:1.17'

    /** Injection .        */
    apt "com.squareup.dagger:dagger-compiler:1.2.2"
    compile 'com.squareup.dagger:dagger:1.2.2'

    compile 'com.jakewharton:butterknife:6.1.0'

    // otto is dead, long live eventbus
    compile 'de.greenrobot:eventbus:2.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'

    /** Logging .        */
    compile 'com.jakewharton.timber:timber:3.1.0'

    /** Network .        */
    compile 'com.github.kevinsawicki:http-request:6.0'
    compile 'com.loopj.android:android-async-http:1.4.6'
    compile 'com.mani:thindownloadmanager:1.0.0'

    /** UI .        */
    compile 'com.github.johnpersano:supertoasts:1.3.4@aar'
    compile 'com.metrekare:contentloadingprogressdialog:0.1'
    compile 'com.github.johnkil.android-robototextview:robototextview:2.3.0'
    compile 'com.github.flavienlaurent.datetimepicker:library:0.0.2'

    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.github.sd6352051.niftydialogeffects:niftydialogeffects:1.0.0@aar'
    compile 'com.baoyz.actionsheet:library:1.1.1'
    compile 'com.ashokvarma.android:bottom-navigation-bar:1.0.0'

    compile 'com.bugtags.library:bugtags-lib:latest.integration'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.zhy:okhttputils:2.4.1'
    compile 'com.github.citux:datetimepicker:0.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.brucetoo.pickview:library:1.1.1'
    compile 'com.wx.wheelview:wheelview:1.3.3'
}

android.applicationVariants.all { variant ->
    def aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.outputs[0].processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}"
        aptOutput.mkdirs()
    }

    variant.javaCompile.options.compilerArgs += [
            '-processorpath', configurations.apt.getAsPath(),
            '-s', aptOutput
    ]

    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
        return !p.getPath().startsWith(aptOutput.getPath())
    }
}

